# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14HElY4Ox-WoWoGhZaKtRiL2eOSCV77ua
"""

# <Dependencies>
from azure.cognitiveservices.personalizer import PersonalizerClient
from azure.cognitiveservices.personalizer.models import RankableAction, RewardRequest, RankRequest
from msrest.authentication import CognitiveServicesCredentials

import datetime, json, os, time, uuid
# </Dependencies>

# <AuthorizationVariables>
key_var_name = 'PERSONALIZER_KEY'
if not key_var_name in os.environ:
	raise Exception('Please set/export the environment variable: {}'.format(key_var_name))
personalizer_key = os.environ[key_var_name]

# Replace <your-resource-name>: https://<your-resource-name>.api.cognitive.microsoft.com/
endpoint_var_name = 'PERSONALIZER_ENDPOINT'
if not endpoint_var_name in os.environ:
	raise Exception('Please set/export the environment variable: {}'.format(endpoint_var_name))
personalizer_endpoint = os.environ[endpoint_var_name]
# </AuthorizationVariables>

# <Client>
# Instantiate a Personalizer client
client = PersonalizerClient(personalizer_endpoint, CognitiveServicesCredentials(personalizer_key))
# </Client>

# <getActions>
def get_actions():
    action1 = RankableAction(id='Tutor 1', features=[{"spokenlanguage":"English", "codinglanguage":"Python"}])
    action2 = RankableAction(id='Tutor 2', features=[{"spokenlanguage":"Vietnamese", "codinglanguage":"C++"}])
    action3 = RankableAction(id='Tutor 3', features=[{"spokenlanguage":"Bahasa Indonesia", 'codinglanguage':'JavaScript'}])
    action4 = RankableAction(id='Tutor 4', features=[{"spokenlanguage":"Chinese", 'codinglanguage':'HTML'}])
    return [action1, action2, action3, action4]
# </getActions>

# <createUserFeatureTutorSpokenLanguage>
def get_tutor_spokenlanguage():
    res = {}
    spokenlanguage_features = ['English','Chinese','Vietnamese','Bahasa Indonesia','Tamil']
    pref = input("Spoken Language: Choose from 'English','Chinese','Vietnamese','Bahasa Indonesia','Tamil'\n")
    
    try:
        ppref = int(pref)
        if(ppref<=0 or ppref>len(spokenlanguage_features)):
            raise IndexError
        res['spokenlanguage_preference'] = spokenlanguage_features[ppref-1]
    except (ValueError, IndexError):
        print("Entered value is invalid. Setting feature value to", spokenlanguage_features[0]+ ".")
        res['spokenlanguage_preference'] = spokenlanguage_features[0]
    return res
# </createUserFeatureTutorSpokenLanguage

# <createUserFeatureCodingLanguage>
def get_tutor_codinglanguage():
    res={}
    codinglanguage_features = ['HTML', 'CSS', 'JavaScript', 'C++', 'Python']
    time = input("Spoken Language: Choose from 'HTML', 'CSS', 'JavaScript', 'C++', 'Python'\n")
    try:
        ppref = int(pref)
        if(ppref<=0 or ppref>len(codinglanguage_features)):
            raise IndexError
        res['codinglanguage_preference'] = codinglanguage_features[ppref-1]
    except (ValueError, IndexError):
        print("Entered value is invalid. Setting feature value to", codinglanguage_features[0]+ ".")
        res['codinglanguage_preference'] = codinglanguage_features[0]
    return res
# </createUserFeatureCodingLanguage>

# <mainLoop>
keep_going = True
while keep_going:

    eventid = str(uuid.uuid4())

    context = [get_tutor_spokenlanguage(), get_tutor_codinglanguage()]
    actions = get_actions()

    # <rank>
    rank_request = RankRequest( actions=actions, context_features=context, event_id=eventid)
    response = client.rank(rank_request=rank_request)
    # </rank>
    
    print("Thanks for waiting. We are trying to match you with an available tutor")
    
    rankedList = response.ranking
    for ranked in rankedList:
        print(ranked.id, ':',ranked.probability)

    print("We have found you a tutor:", response.reward_action_id+".")
    answer = input("Would you like to go ahead with the tutoring? (y/n)\n")[0]

    # <reward>
    reward_val = "0.0"
    if(answer.lower()=='y'):
        reward_val = "1.0"
    elif(answer.lower()=='n'):
        reward_val = "0.0"
    else:
        print("Entered choice is invalid. Please fill up your form again")

    client.events.reward(event_id=eventid, value=reward_val)
    # </reward>

    br = input("Press q to continue: ")
    if(br.lower()=='q'):
        keep_going = False

# </mainLoop>